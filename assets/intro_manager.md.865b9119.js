import{_ as e,a}from"./chunks/rabbitMQ_server.a04d9463.js";import{_ as r,c as i,o as l,N as s}from"./chunks/framework.ea74715b.js";const t="/assets/overview.0ec2358e.png",o="/assets/project-list.891c72fb.png",p="/assets/session-list.919f4dd1.png",c="/assets/session-detail.63c30afe.png",n="/assets/session-record.a94b2adb.png",m="/assets/log-list.e2131766.png",d="/assets/log-detail.9ef4143c.png",w=JSON.parse('{"title":"管理","description":"","frontmatter":{},"headers":[],"relativePath":"intro/manager.md"}'),h={name:"intro/manager.md"},_=s('<h1 id="管理" tabindex="-1">管理 <a class="header-anchor" href="#管理" aria-label="Permalink to &quot;管理&quot;">​</a></h1><h2 id="server" tabindex="-1">Server <a class="header-anchor" href="#server" aria-label="Permalink to &quot;Server&quot;">​</a></h2><p>服务端作为私有子包，不发布，可通过 <a href="https://www.npmjs.com/package/@heimdallr-sdk/cli" target="_blank" rel="noreferrer">@heimdallr-sdk/cli</a> 脚手架快速部署</p><p>服务端使用 express 作为 Node 服务端框架，ORM 库使用 Prisma，数据库则使用的是 MySQL</p><p>正如前面说的，这里我提供了两种服务端，我把它称为“单服务”与“多服务”</p><h3 id="单服务" tabindex="-1">“单服务” <a class="header-anchor" href="#单服务" aria-label="Permalink to &quot;“单服务”&quot;">​</a></h3><p>“单服务”采用的是传统的 MVC 架构，不过这里默认的 View 不调用 API，而是作为接口文档，方便查阅；也可以修改 route 指向不同的页面</p><p>实现的主要功能如下：</p><ul><li>项目的初始化（其实就是应用信息入库）</li><li>会话的创建与写入</li><li>日志信息的接收与写入（同时支持 post 与 get）</li><li>应用列表</li><li>会话列表</li><li>日志列表</li><li>接收 sourcemap 文件</li><li>解析 sourcemap</li></ul><p>“单服务”既负责接收，也负责提供接口给监控后台（Manager）使用，能直接读写数据库</p><p><img src="'+e+'" alt="node server"></p><h3 id="多服务" tabindex="-1">“多服务” <a class="header-anchor" href="#多服务" aria-label="Permalink to &quot;“多服务”&quot;">​</a></h3><p>“多服务”将服务端一分为二，分为“消费服务”与“生产服务”</p><p>使用 RabbitMQ 完成对流量的削峰填谷</p><p><img src="'+a+'" alt="server with rabbitMQ"></p><h4 id="producer" tabindex="-1">Producer <a class="header-anchor" href="#producer" aria-label="Permalink to &quot;Producer&quot;">​</a></h4><p>“生产服务” 也就是图中的 producer，即生产者，面向监控 SDK，从 SDK 接收上报数据</p><p>主要功能如下：</p><ul><li>接收应用信息，并推入应用队列</li><li>接收日志信息（会话就是两条一前一后的日志），并推入日志队列</li><li>接收 sourcemap 文件</li></ul><h4 id="consumer" tabindex="-1">Consumer <a class="header-anchor" href="#consumer" aria-label="Permalink to &quot;Consumer&quot;">​</a></h4><p>“消费服务” 也就是上图的 consumer，也即消费者，面向监控后台，提供读取接口给监控后台调用。</p><p>主要功能如下：</p><ul><li>从应用队列中提取应用消息，写入数据库</li><li>从日志队列中提取日志消息，完成日志消息的“组装”，再写入数据库</li><li>解析 sourcemap 文件</li><li>提供统计数据接口</li><li>提供应用/项目列表接口</li><li>提供会话列表接口</li><li>提供日志列表接口</li></ul><h2 id="manager" tabindex="-1">Manager <a class="header-anchor" href="#manager" aria-label="Permalink to &quot;Manager&quot;">​</a></h2><p>Manager 即监控服务的管理后台，私有包，不发布，同样可以通过 <a href="https://www.npmjs.com/package/@heimdallr-sdk/cli" target="_blank" rel="noreferrer">@heimdallr-sdk/cli</a> 脚手架工具快速部署</p><p>使用了自己写的 Vue3 脚手架 <a href="https://github.com/LuciferHuang/vva-cli" target="_blank" rel="noreferrer">vva-cli</a> 快速开发的，技术栈是 Vue3 + Typescript + Element-Plus，使用 Vite 打包编译</p><p>有以下四个模块：</p><ol><li><p>总览（大屏待完善）</p><p><img src="'+t+'" alt="总览"></p></li><li><p>应用列表</p><p><img src="'+o+'" alt="应用/项目列表"></p></li><li><p>会话</p><p><img src="'+p+'" alt="会话列表"></p><p><img src="'+c+'" alt="会话详情"> 详情不单开页面，在列表页右侧增加抽屉式弹层展示</p><p><img src="'+n+'" alt="会话回放"> （回放功能需引入 <code>@heimdallr-sdk/record</code> 插件）</p></li><li><p>日志</p><p><img src="'+m+'" alt="日志列表"><img src="'+d+'" alt="日志详情"></p></li></ol>',28),u=[_];function g(f,b,k,P,q,v){return l(),i("div",null,u)}const M=r(h,[["render",g]]);export{w as __pageData,M as default};
